 
///////////// Stack  ///////////////////

-> Last in First out

-> implement by array and linked list



-> peek by position number

    val     index       pos
    10      3   <-top   1
    8       2           2
    19      1           3
    22      0           4

    position    index = top - pos + 1
    1               3 = 3 - 1 + 1
    2               2 = 3 - 2 + 1
    3               1 = 3 - 3 + 1
    4               0 = 3 - 4 + 1





----------------------------------------------------------------------------


# infix - prefix -postfix 

    infix:      operand     operator    operand
                    a           +           b
    
    prefix:     operator    operand     operand
                    +           a           b
            
    postfix:    operand     operand     operator
                    a           b           +
    

# obama rules

        ()  <- higher priority
        {}
        []
        
        2^2

        /
        *
        -
        +   <- lower priority



   infix:    8 + 3 * (9 - 6) / 2^2 + 6 / 2

    1. 9 - 6
    2. 2^2
    3. 1. / 2.
    4. 6 / 2
    5. 3 * 3.
    6. 8 + 5.
    7. 6. + 4.

    postfix:
        8 3 9 6 - 2^2 / * + 6 2 / + 


#   infix to prefix and postfix     // prefix not important

    ex:  
        infix: 
            a + b * c = (a + (b * c) )

        prefix: 
                (a + [*bc])
                +a*bc
        
        postfix:
                (a + [bc*])
                abc*+


    ex:
        infix:   a + b + c * d

            prefix:
                a + b + [*cd]
                [+ab] + [*cd]
                ++ab*cd
            
            postfix:
                a + b + [cd*]
                [ab+] + [cd*]
                ab+cd*+


    ex:
        infix:   (a+b) * (c-d)

        prefix: 
            (+ab) * (-cd)
            *+ab-cd

        postfix:
            (ab+) * (cd-)
            ab+cd-*
        
    

# Associativity and unary operator  

        ------------------------------
         sub        pre         assoc 
        ------------------------------
         +,-        1            L-R        L=left, R=right
        ------------------------------
         */2        2            L-R 
        ------------------------------  
         ^          3            R-L
        ------------------------------
         -          4            R-L        (-)=unary minus
        ------------------------------ 
         ()         5            L-R 
        ------------------------------ 


        +,-  =>
                a + b + c - d
                (((a + b) + c) - d)     L-R
        postfix: ab+c+d-

        
        ^ =>
            a ^ b ^ c
            (a ^ (b ^ c))       R-L
        postfix: abc^^  


        - =>    (unary minus)

            1)  -a 
                prefix:    -a
                postfix:    a-

            2) *p
                prefix:    *p
                postfix:    p*

                **p
                prefix: (*(*p))
                postfix: ((p*)*)
            
            3) n!
                prefix: !n
                postfix: n!
            
            4) logx
                prefix: logx
                postfix: xlog
            
             
    ex:     - a + b * log n!
            - a + b * log [n!]
            - a + b * [n!log]
            [a -] + b * [n!log]
            [a -] + [bn!log]
            a-bn!log+             

 

 ### Infix to Postfix using Stack 
    
    methods-1:

            ------------------------------------------
             symbol     priority        Associativity
            ------------------------------------------
             +, -           1               L-R
            ------------------------------------------
             *, /           2               L-R
            ------------------------------------------


        rule: when sym priority is equal or less then in top sym in stack , 
            then pop stack


        example: a + b * c - d / c

            ------------------------------------------
             symbol         stack           postfix        
            ------------------------------------------
             a                              a
            ------------------------------------------
             +               +             ab
            ------------------------------------------
             b               +             ab
            ------------------------------------------
             *              *, +           ab
            ------------------------------------------
             c              *, +           abc
            ------------------------------------------
             -              -              abc*+
            ------------------------------------------
             d              -              abc*+d
            ------------------------------------------
             /              /, -           abc*+d
            ------------------------------------------
             c              /,-            abc*+d
            ------------------------------------------
                                           abc*+dc/-
                                    
    

    methods-2:

            ------------------------------------------
             symbol     priority        Associativity
            ------------------------------------------
             +, -           1               L-R
            ------------------------------------------
             *, /           2               L-R
            ------------------------------------------
             abc            3               L-R
            ------------------------------------------


        example:  a + b * c - d / c

            this time use operand as symbol. and rules is same.
            rule: when sym priority is equal or less then in top sym in stack , 
            then pop stack

            ------------------------------------------
             symbol         stack           postfix        
            ------------------------------------------
             a              a                
            ------------------------------------------
             +               +              a
            ------------------------------------------
             b               b, +           a
            ------------------------------------------
             *               *, +           ab
            ------------------------------------------
             c              c,*,+           ab
            ------------------------------------------
             -              -               abc*+
            ------------------------------------------
             d             d,-              abc*+
            ------------------------------------------
             /              /,-             abc*+d
            ------------------------------------------
             c              c,/,-           abc*+d
            ------------------------------------------
                                           abc*+dc/-
